#version 430 core
layout (location = 0) in vec4 vPosition;

uniform float fTime;
uniform mat4 mTransform;
uniform vec3 vEye;

out vec4 color;


vec3 getAmbient(in vec3 light, in vec3 mat)
{
	return light * mat;
}

vec3 getDifusse(in vec3 light, in vec3 mat, in vec3 lightv, in vec3 Normal)
{
	return max(0.0, dot(lightv, Normal)) * mat * light;
}


vec3 getSpecular( in vec3 light, in vec3 mat, in vec3 lightv, in vec3 Normal, in float shininess)
{
	vec3 viewv = normalize( vec3(0.,0.,0.) - vEye );
	vec3 refl = reflect( vec3(0.,0.,0.) - lightv, Normal );

	//specular light computation
	vec3 specular = vec3( 0.0, 0.0, 0.0 );
	if( dot(lightv, viewv) > 0.0)
	{
		specular = pow(max(0.0, dot(viewv, refl)), shininess) * light * mat;
	}
	return specular;
}


//formula original
float F(float x, float z, float time) 
{
	return	4.0 * sin(radians(time + (x*x + z*z)));
}

//Derivada parcial respecto a "a"
float Fp(float a, float b, float time) 
{
	return	8*a * cos(radians(a*a + b*b + time)) ;
}

//formula para plano tangente
float tangentPlane (float x0, float z0, float x, float z, float time)
{
	return  F(x0, z0, time) + Fp(x, z, time)*(x-x0) + Fp(z, x, time)*(z-z0);
}


//calculamos la normal antes de aplicar transformaciones
vec3 calculateNormal (vec4 vertex, float time)
{
	//Obtenemos  puntos sobre el plano tangente
	vec3 p0 = vertex.xyz;

	vec3 p1 = vec3(vertex.x+1, 0.0, vertex.z);
	p1.y =  tangentPlane(vertex.x, vertex.z, p1.x, p1.z, time);

	vec3 p2 = vec3(vertex.x, 0.0, vertex.z+1);
	p1.y =  tangentPlane(vertex.x, vertex.z, p1.x, p1.z, time);

	return cross(p2-p0, p1-p0);
}

vec3 calculateNormal2 (vec4 vertex, float time)
{
	//Obtenemos  puntos sobre el plano tangente
	vec3 p0 = vec3(1.0, Fp(vertex.x, vertex.z, time), 0.0);
	vec3 p1 = vec3(0.0, Fp(vertex.z, vertex.x, time), 1.0);
	
	return cross(p0-vertex.xyz, p1-vertex.xyz);
}




void main()
{
	const vec3 lA = vec3( 0.2, 0.2, 0.2 );
	const vec3 lD = vec3( 1. , 1. , 1. );
	const vec3 lS = vec3( 1. , 1. , 1. );
	const vec3 mA = vec3( 1. , 0.5, 0. );
	const vec3 mD = vec3( 1. , 0.5, 0. );
	const vec3 mS = vec3( 0.6, 0.6, 0.6 );
	const float fShininess = 80.0;
	const vec3 lightPosition = vec3( 100. , 80.0, 0. );

	vec4 vNewVec = vPosition;
	//calculamos la altura de este vertice
	vNewVec.y = F(vNewVec.x, vNewVec.z, fTime);

	//CALCULO DE NORMALES
	vec3 normal = normalize(calculateNormal (vNewVec, fTime));
	mat4 matForNormals = transpose(inverse(mTransform));
	vec3 newNormal = normalize(matForNormals * vec4(normal, 1.0)).xyz;

	//calculo de parametros para las funciones A D S
	vec3 lightv = normalize( lightPosition - vEye);

	color = clamp(
			  vec4(getAmbient(lA, mA), 1.0) 
			+ vec4(getDifusse(lD, mD, lightv, newNormal), 1.0)
			+ vec4(getSpecular(lS, mS, lightv, newNormal, fShininess), 1.0), 
			0.0, 1.0);
	
   gl_Position = mTransform * vNewVec;
}